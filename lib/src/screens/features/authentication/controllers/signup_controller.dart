import 'package:cura_link/src/mongodb/mongodb.dart';
import 'package:cura_link/src/repository/authentication_repository/authentication_repository.dart';
import 'package:cura_link/src/repository/user_repository/user_repository.dart';
import 'package:cura_link/src/screens/features/authentication/models/chat_user_model.dart';
import 'package:cura_link/src/screens/features/authentication/models/user_model_mongodb.dart';
import 'package:cura_link/src/shared%20prefrences/shared_prefrence.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:crypto/crypto.dart'; // Import for hashing
import 'dart:convert';

import 'package:mongo_dart/mongo_dart.dart';

class SignUpController extends GetxController {
  static SignUpController get instance => Get.find();
  final showPassword = false.obs;
  final isGoogleLoading = false.obs;
  final isFacebookLoading = false.obs;
  GlobalKey<FormState> signupFormKey = GlobalKey<FormState>();

  // TextField Controllers to get data from TextFields
  final userEmail = TextEditingController();
  final userPassword = TextEditingController();
  final userName = TextEditingController();
  final userPhone = TextEditingController();

  /// Loader
  final isLoading = false.obs;

  /// Register New User using [EmailAndPassword]
  Future<void> createUser() async {
    try {
      isLoading.value = true;

      if (!signupFormKey.currentState!.validate()) {
        isLoading.value = false;
        return;
      }

      // Get the user type from shared preferences
      final userType = await loadUserType();
      // Authenticate User first
      var user = UserModelMongoDB(
        userEmail: userEmail.text.trim(),
        userPassword: userPassword.text.trim(),
        userName: userName.text.trim(),
        userPhone: userPhone.text.trim(),
        userAddress: '', // Optional field
        userType: userType,
        userId: '', // To be auto-generated by MongoDB
      );

      final auth = AuthenticationRepository.instance;
      await auth.registerWithEmailAndPassword(
          user.userEmail!, user.userPassword!);
      final hashedPassword =
          sha256.convert(utf8.encode(userPassword.text.trim())).toString();

      // Create UserModelMongoDB object
      final Muser = UserModelMongoDB(
        userEmail: userEmail.text.trim(),
        userPassword: hashedPassword,
        userName: userName.text.trim(),
        userPhone: userPhone.text.trim(),
        userAddress: '', // Optional field
        userType: userType,
        userId: auth.firebaseUser?.uid, // To be auto-generated by MongoDB
      );

      final time = DateTime.fromMicrosecondsSinceEpoch.toString();
      final Map<String, dynamic> chatUserMap = {
        "userId": auth.firebaseUser?.uid,
        "userName": userName.text.trim(),
        "userEmail": userEmail.text.trim(),
        "userPhone": userPhone.text.trim(),
        "userImage": "",
        "userAbout": "Hey i am using Cura Link Chat",
        "userCreatedAt": time,
        "userIsOnline": false,
        "userLastActive": time,
        "userPushToken": "",
      };
      DbCollection? usersCol = MongoDatabase.users;
      await UserRepository.instance
          .createUser(userData: chatUserMap, collection: usersCol);

      switch (userType) {
        case 'Patient':
          await UserRepository.instance.createPatient({
            'userEmail': Muser.userEmail,
            'userPassword': Muser.userPassword,
            'userName': Muser.userName,
            'userPhone': Muser.userPhone,
            'userAddress': Muser.userAddress,
            'userType': Muser.userType,
            'userId': Muser.userId,
          });
          break;
        case 'Lab':
          await UserRepository.instance.createLabUser({
            'userEmail': Muser.userEmail,
            'userPassword': Muser.userPassword,
            'userName': Muser.userName,
            'userPhone': Muser.userPhone,
            'userAddress': Muser.userAddress,
            'userType': Muser.userType,
            'userId': Muser.userId,
            'userVerified': "0",
          });
          break;
        case 'Nurse':
          await UserRepository.instance.createNurseUser({
            'userEmail': Muser.userEmail,
            'userPassword': Muser.userPassword,
            'userName': Muser.userName,
            'userPhone': Muser.userPhone,
            'userAddress': Muser.userAddress,
            'userType': Muser.userType,
            'userId': Muser.userId,
          });
          break;
        case 'Medical-Store':
          await UserRepository.instance.createMedicalStoreUser({
            'userEmail': Muser.userEmail,
            'userPassword': Muser.userPassword,
            'userName': Muser.userName,
            'userPhone': Muser.userPhone,
            'userAddress': Muser.userAddress,
            'userType': Muser.userType,
            'userId': Muser.userId,
          });
          break;
      }

      // Update initial screen
      auth.setInitialScreen(auth.firebaseUser);
    } catch (e) {
      isLoading.value = false;
      Get.snackbar("Error", e.toString(),
          snackPosition: SnackPosition.BOTTOM,
          duration: const Duration(seconds: 5));
    } finally {
      isLoading.value = false;
    }
  }

  /// [PhoneNoAuthentication]
  Future<void> phoneAuthentication(String phoneNo) async {
    try {
      await AuthenticationRepository.instance.phoneAuthentication(phoneNo);
    } catch (e) {
      throw e.toString();
    }
  }
}
