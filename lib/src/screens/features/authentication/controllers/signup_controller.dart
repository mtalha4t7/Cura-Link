import 'package:cura_link/src/repository/authentication_repository/authentication_repository.dart';
import 'package:cura_link/src/repository/user_repository/user_repository.dart';
import 'package:cura_link/src/screens/features/authentication/models/user_model_mongodb.dart';
import 'package:cura_link/src/shared%20prefrences/shared_prefrence.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class SignUpController extends GetxController {
  static SignUpController get instance => Get.find();
  final showPassword = false.obs;
  final isGoogleLoading = false.obs;
  final isFacebookLoading = false.obs;
  GlobalKey<FormState> signupFormKey = GlobalKey<FormState>();

  // TextField Controllers to get data from TextFields
  final userEmail = TextEditingController();
  final userPassword = TextEditingController();
  final userName = TextEditingController();
  final userPhone = TextEditingController();

  /// Loader
  final isLoading = false.obs;

  /// Register New User using either [EmailAndPassword] OR [PhoneNumber] authentication
  Future<void> createUser() async {
    try {
      isLoading.value = true;

      if (!signupFormKey.currentState!.validate()) {
        isLoading.value = false;
        return;
      }

      // Get the user type from shared preferences
      final userType = await loadUserType();
      // Authenticate User first
      var user = UserModelMongoDB(
        userEmail: userEmail.text.trim(),
        userPassword: userPassword.text.trim(),
        userName: userName.text.trim(),
        userPhone: userPhone.text.trim(),
        userAddress: '', // Optional field
        userType: userType,
        userId: '', // To be auto-generated by MongoDB
      );

      final auth = AuthenticationRepository.instance;
      await auth.registerWithEmailAndPassword(
          user.userEmail!, user.userPassword!);

      // Create UserModelMongoDB object
      final Muser = UserModelMongoDB(
        userEmail: userEmail.text.trim(),
        userPassword: userPassword.text.trim(),
        userName: userName.text.trim(),
        userPhone: userPhone.text.trim(),
        userAddress: '', // Optional field
        userType: userType,
        userId: auth.firebaseUser?.uid, // To be auto-generated by MongoDB
      );

      // Save user data in MongoDB
      await UserRepository.instance.createUser(Muser.toJson());

      // Update initial screen
      auth.setInitialScreen(auth.firebaseUser);
    } catch (e) {
      isLoading.value = false;
      Get.snackbar("Error", e.toString(),
          snackPosition: SnackPosition.BOTTOM,
          duration: const Duration(seconds: 5));
    } finally {
      isLoading.value = false;
    }
  }

  /// [PhoneNoAuthentication]
  Future<void> phoneAuthentication(String phoneNo) async {
    try {
      await AuthenticationRepository.instance.phoneAuthentication(phoneNo);
    } catch (e) {
      throw e.toString();
    }
  }
}
